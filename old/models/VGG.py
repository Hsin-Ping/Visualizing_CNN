import torchimport torch.nn as nnfrom torchvision.models import vgg16from collections import OrderedDictclass vgg16_net(nn.Module):    def __init__(self):        super().__init__()        self.features = nn.Sequential(            nn.Conv2d(3, 64, 3, 1, 1),            nn.ReLU(),            nn.Conv2d(64, 64, 3, 1, 1),            nn.ReLU(),             nn.MaxPool2d(2, 2, return_indices=True), # (64, 112, 112) #4                        nn.Conv2d(64, 128, 3, 1, 1),            nn.ReLU(),            nn.Conv2d(128, 128, 3, 1, 1),            nn.ReLU(),            nn.MaxPool2d(2, 2, return_indices=True), # (128, 56, 56) #9                        nn.Conv2d(128, 256, 3, 1, 1),            nn.ReLU(),            nn.Conv2d(256, 256, 3, 1, 1),            nn.ReLU(),            nn.Conv2d(256, 256, 3, 1, 1),            nn.ReLU(),             nn.MaxPool2d(2, 2, return_indices=True), # (256, 28, 28) #16                        nn.Conv2d(256, 512, 3, 1, 1),            nn.ReLU(),            nn.Conv2d(512, 512, 3, 1, 1),            nn.ReLU(),            nn.Conv2d(512, 512, 3, 1, 1),            nn.ReLU(),             nn.MaxPool2d(2, 2, return_indices=True), # (512, 14, 14) #23                        nn.Conv2d(512, 512, 3, 1, 1),            nn.ReLU(),            nn.Conv2d(512, 512, 3, 1, 1),            nn.ReLU(),            nn.Conv2d(512, 512, 3, 1, 1),            nn.ReLU(),             nn.MaxPool2d(2,2, return_indices=True) #30            ) #(512, 7, 7)                self.flatten =  nn.Flatten()                self.classifier = nn.Sequential(            nn.Linear(512*49, 4096),            nn.ReLU(),            nn.Dropout(),            nn.Linear(4096, 4096),            nn.ReLU(),            nn.Dropout(),            nn.Linear(4096, 1000),            nn.Softmax(dim=1)            )                self.load_pretrained_weights()                self.feature_maps = OrderedDict()        self.pooling_loc = OrderedDict()        return        def load_pretrained_weights(self):        net = vgg16(pretrained=True)        for idx, layer in enumerate(net.features):            if isinstance(layer, nn.Conv2d):                self.features[idx].weight.data = layer.weight.data                self.features[idx].bias.data = layer.bias.data                        for idx, layer in enumerate(net.classifier):            if isinstance(layer, nn.Linear):                self.classifier[idx].weight.data = layer.weight.data                self.classifier[idx].bias.data = layer.bias.data        def forward(self, x):        for idx, layer in enumerate(self.features):            if isinstance(layer, nn.MaxPool2d):                x, pooling_loc = layer(x)            else:                x = layer(x)        out = self.flatten(x)        prob = self.classifier(out)        return prob    #net = VGG16()net = vgg16(pretrained=True)#print(net.features[0].weight.data)#for idx, layer in enumerate(net.features): #   if isinstance(layer, nn.Conv2d):#        print(idx)